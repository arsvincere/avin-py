[project]
name = "avin"
version = "0.1.0"
description = "Open source cross-platform trading system"
authors = [{name = "Alex Avin", email = "mr.alexavin@gmail.com"}]
license = "MIT"
license-files = ["LICENSE"]
requires-python = ">=3.13"
dependencies = [
    "click>=8.1",
    "flit",
    "httpx",
    "moexalgo==2.2.2",
    "numpy",
    "pandas",
    "polars-lts-cpu",
    "pyarrow",
    "pytest",
    "pytest-asyncio",
    "tinkoff-investments",
]

[project.scripts]
avin-data = "avin_data.cli:cli"

[build-system]
requires = ["flit_core >=3.11,<4"]
build-backend = "flit_core.buildapi"

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "/home/alex/AVIN/tests/",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestCollectionWarning",
    ]
asyncio_mode="auto"
asyncio_default_fixture_loop_scope="session"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as PEP8.
line-length = 78
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
select = [
    # default
    "E4", "E7", "E9", "F",
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
ignore = [
    "I001", # Import block is un-sorted or un-formatted (when use *)
    "E743", # W Ambiguous function name: `l` Ruff (E743) [61, 9]
    "F403", # import *
    "F405", # may be undefined, or defined from star imports
    "F821", # undefine name (не смотря на __future__.annotation)
    "B011", # assert False
    "UP007", # Optional[int] -> Use `X | Y` for type annotations
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
